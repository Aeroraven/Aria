#version 450
precision highp float;
layout(set = 0,binding = 0) uniform UniformBufferObject{
    vec4 translation;
    vec4 rotAxis;
    float moveFocal;
    float chosenAngle;
    float translationFirst;
    float zDistance;
    float rectW;
    float rectH;
    float rotExtZ;
}ubo;

struct Particle{
    vec4 rnd;
    vec4 pos;
};

layout(std140, set = 1,binding = 0) readonly buffer ssboIn{
    Particle particleIn[];
};

layout(std140, set = 2,binding = 0) buffer ssboOut{
    Particle particleOut[];
};

layout(local_size_x = 256,local_size_y=1,local_size_z=1) in;



const float mvFocal = 1.0;
mat4 generateRotationMatrix(vec3 axis, float angle){
    float c = cos(angle);
    float s = sin(angle);
    float oc = 1.0 - c;

    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,
                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,
                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,
                0.0,                                0.0,                                0.0,                                1.0);
}

float getFunc(float phi,float theta,float k,float focal){
    float u = (1.0-sin(phi)*focal)*sin(theta);
    float v = (focal*cos(phi)*sin(theta)+k*cos(theta));
    float deno = sqrt(u*u+v*v);
    return acos(u/deno);
}


void main(){
    uint idx = gl_GlobalInvocationID.x;
    Particle pIn = particleIn[idx];


    vec4 rectVertices[4];
    float interiorAngles[4];
    rectVertices[0] = vec4(-ubo.rectW,ubo.rectH,0.0,1.0);
    rectVertices[1] = vec4(ubo.rectW,ubo.rectH,0.0,1.0);
    rectVertices[2] = vec4(ubo.rectW,-ubo.rectH,0.0,1.0);
    rectVertices[3] = vec4(-ubo.rectW,-ubo.rectH,0.0,1.0);
    float rotAng = (pIn.rnd.x+1.0) * 3.14159;
    float rotAngZ = pIn.rnd.z * 3.14159;
    float transX = ubo.moveFocal*sin(pIn.rnd.y*3.14159+3.14159);
    float transY = ubo.moveFocal*cos(pIn.rnd.y*3.14159+3.14159);
    mat4 rotMat = generateRotationMatrix(normalize(vec3(ubo.rotAxis.xyz)),rotAng);
    mat4 rotMatZ = generateRotationMatrix(normalize(vec3(0.0,0.0,1.0)),ubo.rotExtZ);

    float dv = getFunc(pIn.rnd.y*3.14159+3.14159,rotAng,ubo.zDistance,ubo.moveFocal);
    if(ubo.translationFirst>0.5){
        for(int i=0;i<4;i++){
            rectVertices[i] = rectVertices[i] + vec4(transX,transY,0.0,0.0)+vec4(ubo.translation.xyz,0.0);
        }
    }
    for(int i=0;i<4;i++){
        rectVertices[i] = rotMat * rectVertices[i];
        rectVertices[i] = rotMatZ * rectVertices[i] + vec4(0.0,0.0,ubo.zDistance,0.0);
    }
    if(ubo.translationFirst<0.5){
        for(int i=0;i<4;i++){
            rectVertices[i] = rectVertices[i] + vec4(transX,transY,0.0,0.0)+vec4(ubo.translation.xyz,0.0);
        }
    }
    float discardFlag[4];
    for(int i=0;i<4;i++){
        discardFlag[i]=0.0;
    }
    for(int i=0;i<4;i++){
        vec4 v1 = rectVertices[i];
        vec4 v2 = rectVertices[(i+1)%4];
        vec4 v3 = rectVertices[(i-1)%4];

        vec2 a1 = v1.xy/v1.z;
        vec2 a2 = v2.xy/v2.z;
        vec2 a3 = v3.xy/v3.z;

        vec2 d1 = normalize(a2-a1);
        vec2 d2 = normalize(a3-a1);

        if(length(a2-a1)<1e-4||length(a3-a1)<1e-4){
            discardFlag[i]=1.0;
            continue;
        }

        float angle = acos(dot(d1,d2));
        interiorAngles[i] = mix(-1.0,1.0,angle/3.1415926);
    }
    int displayId = 0;
    if(ubo.chosenAngle>3.5){
        displayId=3;
    }else if(ubo.chosenAngle>2.5){
        displayId=2;
    }else if(ubo.chosenAngle>1.5){
        displayId=1;
    }else if(ubo.chosenAngle>0.5){
        displayId=0;
    }
    dv = mix(-1.0,1.0,dv/3.1415926);
    if(discardFlag[displayId]>0.5){
        particleOut[idx].pos = vec4(0.0,0.0,0.0,0.0);
    }else{
        if(ubo.chosenAngle>4.5){
            particleOut[idx].pos = vec4(pIn.rnd.x,dv,pIn.rnd.y,0.0);
        }else{
            particleOut[idx].pos = vec4(pIn.rnd.x,interiorAngles[displayId],pIn.rnd.y,0.0);
        }
        
    }

}