#version 450
struct Object {
    vec4 pos;
    vec4 velocity;
    vec4 lastPos;
    vec4 normal;
    float time;
};
layout(std140, set = 0,binding = 0) readonly buffer sIn{
    Object nodeIn[];
};
layout(std140, set = 1,binding = 0) writeonly buffer sOut{
    Object nodeOut[];
};
layout(set = 2,binding = 0) uniform Ubo{
    float clothSize;
    float neighbourDistance;
    float elasticCoef;
    float gravityCoef;
    float particleMass;
    float damping;
    float timeStep;
    float windAmpl;
    float windFreq;
}ubo;

layout(local_size_x = 8, local_size_y=8, local_size_z=1) in;

vec3 addSpringForce(ivec2 tgt,ivec2 src,float alpha,float base){
    int cSize = int(ubo.clothSize);
    if(src.x<0 || src.x>=cSize || src.y<0 || src.y>=cSize) return vec3(0.0);
    int srcIdx = src.y * cSize + src.x;
    int tgtIdx = tgt.y * cSize + tgt.x;

    float baseDist = base*ubo.neighbourDistance;
    vec3 srcPos = nodeIn[srcIdx].pos.xyz;
    vec3 tgtPos = nodeIn[tgtIdx].pos.xyz;

    vec3 dir = normalize(srcPos-tgtPos);
    float dist = length(srcPos-tgtPos);
    float force = (dist-baseDist) * ubo.elasticCoef*alpha;
    return dir * force;
}

vec3 addGravity(ivec2 tgt){
    return vec3(0.0, -ubo.gravityCoef, 0.0);
}

vec3 addWind(ivec2 tgt){
    float time = nodeIn[0].time;
    return -vec3(0.0,0.0,max(0.0,sin(time*ubo.windFreq)*ubo.windAmpl));
}
vec3 verlet(ivec2 tgt,vec3 acc){
    int cSize = int(ubo.clothSize);
    int tgtIdx = tgt.y * cSize + tgt.x;
    vec3 pos = nodeIn[tgtIdx].pos.xyz;
    vec3 lastPos = nodeIn[tgtIdx].lastPos.xyz;
    vec3 npos = pos + (pos-lastPos) * ubo.damping + acc * ubo.timeStep * ubo.timeStep;
    return npos;
}

vec3 addAllSpringConstraints(ivec2 tgt){
    vec3 accu = vec3(0.0);
    //Structural & Shearing
    accu += addSpringForce(tgt, ivec2(tgt.x+1,tgt.y),1.0,1.0);
    accu += addSpringForce(tgt, ivec2(tgt.x-1,tgt.y),1.0,1.0);
    accu += addSpringForce(tgt, ivec2(tgt.x,tgt.y+1),1.0,1.0);
    accu += addSpringForce(tgt, ivec2(tgt.x,tgt.y-1),1.0,1.0);
    accu += addSpringForce(tgt, ivec2(tgt.x+1,tgt.y+1),1.0,sqrt(2.0));
    accu += addSpringForce(tgt, ivec2(tgt.x-1,tgt.y-1),1.0,sqrt(2.0));
    accu += addSpringForce(tgt, ivec2(tgt.x+1,tgt.y-1),1.0,sqrt(2.0));
    accu += addSpringForce(tgt, ivec2(tgt.x-1,tgt.y+1),1.0,sqrt(2.0));

    //Bending
    accu += addSpringForce(tgt, ivec2(tgt.x+2,tgt.y),0.6,2.0);
    accu += addSpringForce(tgt, ivec2(tgt.x-2,tgt.y),0.6,2.0);
    accu += addSpringForce(tgt, ivec2(tgt.x,tgt.y+2),0.6,2.0);
    accu += addSpringForce(tgt, ivec2(tgt.x,tgt.y-2),0.6,2.0);

    accu /= ubo.particleMass;
    return accu;
}

vec3 calcNormalSingle(ivec2 p0,ivec2 p1, ivec2 p2){
    int cSize = int(ubo.clothSize);
    if(p0.x<0 || p0.x>=cSize || p0.y<0 || p0.y>=cSize) return vec3(0.0);
    if(p1.x<0 || p1.x>=cSize || p1.y<0 || p1.y>=cSize) return vec3(0.0);
    if(p2.x<0 || p2.x>=cSize || p2.y<0 || p2.y>=cSize) return vec3(0.0);
    int p0Idx = p0.y * cSize + p0.x;
    int p1Idx = p1.y * cSize + p1.x;
    int p2Idx = p2.y * cSize + p2.x;
    vec3 p0Pos = nodeIn[p0Idx].pos.xyz;
    vec3 p1Pos = nodeIn[p1Idx].pos.xyz;
    vec3 p2Pos = nodeIn[p2Idx].pos.xyz;
    vec3 v1 = p1Pos - p0Pos;
    vec3 v2 = p2Pos - p0Pos;
    return normalize(cross(v1,v2));
}

vec3 calcNormal(ivec2 loc){
    vec3 total = vec3(0.0);
    total += calcNormalSingle(ivec2(loc.x,loc.y),ivec2(loc.x+1,loc.y),ivec2(loc.x,loc.y+1));
    total += calcNormalSingle(ivec2(loc.x,loc.y),ivec2(loc.x,loc.y+1),ivec2(loc.x-1,loc.y));
    total += calcNormalSingle(ivec2(loc.x,loc.y),ivec2(loc.x-1,loc.y),ivec2(loc.x,loc.y-1));
    total += calcNormalSingle(ivec2(loc.x,loc.y),ivec2(loc.x,loc.y-1),ivec2(loc.x+1,loc.y));
    return normalize(total);
}

void main(){
    ivec2 locId = ivec2(int(gl_GlobalInvocationID.x),int(gl_GlobalInvocationID.y)); 
	int idx = locId.y * int(ubo.clothSize) + locId.x;
    
    if(locId.y==int(ubo.clothSize)-1 && locId.x==int(ubo.clothSize)-1) return;
    if(locId.y==int(ubo.clothSize)-1 && locId.x==0) return;
    vec3 acc = addGravity(ivec2(locId.x,locId.y));
    acc += addAllSpringConstraints(ivec2(locId.x,locId.y));
    acc += addWind(ivec2(locId.x,locId.y));

    nodeOut[idx].lastPos = nodeIn[idx].pos;
    nodeOut[idx].pos = vec4(verlet(ivec2(locId.x,locId.y),acc),1.0);
    nodeOut[idx].time = nodeIn[idx].time + ubo.timeStep;
    nodeOut[idx].normal = vec4(calcNormal(ivec2(locId.x,locId.y)),0.0);
}
